(ns virtual-keyboard.keyboard-action
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   ["package:vibration/vibration.dart" :as vibrate]
   [virtual-keyboard.keyboard-candidates :as keyboard-candidates]
   [virtual-keyboard.options :as options]
   [cljd.flutter :as f]
   [virtual-keyboard.input-control :as control]
   [virtual-keyboard.utils :as utils]
   [virtual-keyboard.popup-key-candidates :as candidates]))

(declare on-key-press
         action-key-container)

(defn action-widget [vkey items-count rows-count]
  (f/widget
   :context ctx
   :get {:value-of [:info :state]}
   :let [width (-> m/MediaQuery (.of ctx) .-size .-width)
         height (:keyboard/height info)
         key-height (/ height rows-count)
         key-base-width (/ width 10)]
  ;;  (m/Flexible)
  ;;  .child
   (m/Padding
    .padding
    (.symmetric
     m/EdgeInsets
     .horizontal (:keyboard/horizontal-key-padding info)
     .vertical 0))
  ;;  .child
  ;;  (m/Container
  ;;   .alignment (.center m/Alignment)
  ;;   .height key-height
  ;;   .decoration
  ;;   (m/BoxDecoration
  ;;    .color (:keyboard/action-keys-container-color info)
  ;;    .borderRadius
  ;;    (.all m/BorderRadius
  ;;          (.circular m/Radius
  ;;                     (:keyboard/key-cap-border-radius info))))
  ;;   ;; .width double/infinity
  ;;   )

   .child
   (condp = (:action vkey)
     :backspace
     (m/GestureDetector
      .onLongPress
      (fn []
        ;; (swap! state assoc :keyboard/long-press true)
        ;; (.periodic
        ;;  a/Timer
        ;;  (Duration .milliseconds 300);options/back-space-event-period)
        ;;  (fn [^a/Timer timer] (if (true? (:keyboard/long-press @state))
        ;;                         (on-key-press vkey state)
        ;;                         (.cancel timer))))
        (dart:core/print "long press")
        nil)
      .onLongPressUp
      (fn [] (swap! state assoc :keyboard/long-press false))
      .child
      (action-key-container
       {:width (- (* 1.5 key-base-width) (* 2 (:keyboard/horizontal-key-padding info)))
        :height key-height
        :child (m/Icon (.backspace m/Icons) .color (:keyboard/action-text-color info))} vkey))

     :shift
     (action-key-container
      {:width (- (* 1.5 key-base-width) (* 2 (:keyboard/horizontal-key-padding info)))
       :height key-height
       :child (m/Icon (.arrow_upward m/Icons) .color (:keyboard/action-text-color info))} vkey)

     :return
     (action-key-container
      {:width (- (* 1.5 key-base-width) (* 2 (:keyboard/horizontal-key-padding info)))
       :height key-height
       :child
       (if (= :single-line (:keyboard/return-mode @state))
         (m/Center
          .child
          (m/Text
           "done"
           .textAlign (.center m/TextAlign)
           .style (m/TextStyle
                   .color (:keyboard/key-text-color info)
                   .fontFamily "Courier"
                   .fontWeight (.w700 m/FontWeight)
                   .fontSize (:keyboard/shift-click-font-size info))))
         (m/Icon (.keyboard_return m/Icons) .color (:keyboard/action-text-color info)))} vkey)

     :space
     (action-key-container
      {:width (- (* 5 key-base-width) (* 2 (:keyboard/horizontal-key-padding info)))
       :height key-height
       :child (m/Center
               .child
               (m/Text
                "_____"
                .textAlign (.center m/TextAlign)
                .style (m/TextStyle
                        .color (:keyboard/shift-click-text-color info)
                        .fontWeight (.w700 m/FontWeight)
                        .fontSize (:keyboard/shift-click-font-size info))))} vkey)
      ;;  :child (m/Icon (.space_bar m/Icons) .color (:keyboard/action-text-color info))} info)

     :special-characters
     (action-key-container
      {:width (- (* 1.25 key-base-width) (* 2 (:keyboard/horizontal-key-padding info)))
       :height key-height
       :child (m/Center
               .child
               (m/Text
                "?123"
                .textAlign (.center m/TextAlign)
                .style (m/TextStyle
                        .color (:keyboard/key-text-color info)
                        .fontFamily "Courier"
                        .fontWeight (.w700 m/FontWeight)
                        .fontSize (:keyboard/shift-click-font-size info))))} vkey)

     :small-special-characters
     (action-key-container
      {:width (- (* 1.25 key-base-width) (* 2 (:keyboard/horizontal-key-padding info)))
       :height key-height
       :child (m/Center
               .child
               (m/Text
                "?123"
                .textAlign (.center m/TextAlign)
                .style (m/TextStyle
                        .color (:keyboard/key-text-color info)
                        .fontFamily "Courier"
                        .fontWeight (.w700 m/FontWeight)
                        .fontSize (:keyboard/shift-click-font-size info))))} vkey)

     :suffix-candidates
     (action-key-container
      {:width (- (* 1 key-base-width) (* 2 (:keyboard/horizontal-key-padding info)))
       :height key-height
       :child (m/Center
               .child
               (mgl/MongolText
                "ᠳᠠᠭᠠᠪᠤᠷᠢ"
                .style (m/TextStyle
                        .color (:keyboard/key-text-color info)
                        .fontWeight (.w700 m/FontWeight)
                        .fontSize (:keyboard/shift-click-font-size info))))} vkey)

     :spacer-block
     (action-key-container
      {:width (- (* 4 key-base-width) (* 2 (:keyboard/horizontal-key-padding info)))
       :height key-height
       :child (m/Text "")} vkey)

     :small-spacer-block
     (action-key-container
      {:width (- (* 3 key-base-width) (* 2 (:keyboard/horizontal-key-padding info)))
       :height key-height
       :child (m/Text "")} vkey)

     :extra-small-spacer-block
     (action-key-container
      {:width (* key-base-width 1.5)
       :height key-height
       :child (m/Text "")} vkey)

     :other-special-characters
     (action-key-container
      {:width (- (* 1.5 key-base-width) (* 2 (:keyboard/horizontal-key-padding info)))
       :height key-height
       :child (m/Center
               .child
               (m/Text
                "=\\\\<"
                .style
                (m/TextStyle .fontWeight (.w600 m/FontWeight)
                             .color (:keyboard/key-text-color info)
                             .fontSize (:keyboard/shift-click-font-size info))))} vkey)

     :abc
     (action-key-container
      {:width (- (* 1.25 key-base-width) (* 2 (:keyboard/horizontal-key-padding info)))
       :height key-height
       :child (m/Center
               .child
               (m/Text
                (nth (:keyboard/layout-names info) (:keyboard/layout-index @state))
                .style
                (m/TextStyle .fontWeight (.w600 m/FontWeight)
                             .color (:keyboard/key-text-color info)
                             .fontSize (:keyboard/shift-click-font-size info))))} vkey)

     :empty
    ;;  (.shrink m/SizedBox)
     (m/Container
      .width
      (- (* 0.5 key-base-width) (* 2 (:keyboard/horizontal-key-padding info)))))))

(defn- key-box-decoration
  [info]
  (m/BoxDecoration
   .color (:keyboard/action-keys-container-color info)
   .borderRadius
   (.all m/BorderRadius
         (.circular m/Radius
                    (:keyboard/key-cap-border-radius info)))))

(defn action-key-container
  [{width :width height :height child :child}
   vkey]
  (f/widget
  ;;  :get [:info :state]
   :get {:value-of [:info :state]}
   (m/Container
    .clipBehavior (.hardEdge m/Clip)
    .height height
    .width width
    .decoration (key-box-decoration info)
    .child
    (m/Material
     .color (:keyboard/action-keys-container-color info)
     .child
     (m/InkWell ;.splashColor m.Colors/white
      .onTap #(on-key-press vkey state)
      .child child)))))

(defn on-key-press
  [vkey state]
  (when (true? (:keyboard/is-vibrate-on @state))
    (let [has-vibrate (await (.hasVibrator vibrate/Vibration))]
      (when (true? has-vibrate)
        (.vibrate vibrate/Vibration .duration (:keyboard/vibrate-duration @state)))))
  (condp = (:key-type vkey)
    :string
    (let [new-str (cond
                    (and (:keyboard/is-shift-enabled @state)
                         (some? (:caps-text vkey)))
                    (:caps-text vkey)

                    :else
                    (:text vkey))]
      (control/insert-text new-str)
      (let [last-word (utils/get-current-word (.-text @control/editing-value)
                                              (.-selection @control/editing-value))
            candidates (get @keyboard-candidates/data last-word)]
        (swap! state assoc :keyboard/candidates-list (map first (sort-by last > candidates)))))

    :action
    (condp = (:action vkey)
      :backspace
      (do
        (control/delete-text)
        (let [last-word (utils/get-current-word (.-text @control/editing-value)
                                                (.-selection @control/editing-value))
              candidates (get @keyboard-candidates/data last-word)]
          (swap! state assoc :keyboard/candidates-list (map first (sort-by last > candidates)))))

      :return
      (if (= :single-line (:keyboard/return-mode @state))
        (let [callback (:keyboard/return-callback @state)]
          (when-not (nil? callback)
            (callback)))
        (control/insert-text "\n"))

      :space
      (do
        (control/insert-text " ")
        (swap! state assoc :keyboard/candidates-list []))

      :spacer-block
      (do
        (control/insert-text " ")
        (swap! state assoc :keyboard/candidates-list []))

      :small-spacer-block
      (do
        (control/insert-text " ")
        (swap! state assoc :keyboard/candidates-list []))

      :shift
      (swap! state assoc :keyboard/is-shift-enabled (not (:keyboard/is-shift-enabled @state)))

      :abc
      (let [layout-index (get @state :keyboard/layout-index)]
        (swap! state assoc :keyboard/layout-index (mod (inc layout-index) (count (:keyboard/layout-names options/keyboard-option))))
        (swap! state assoc :keyboard/is-special-enabled false)
        (swap! state assoc :keyboard/is-other-special-enabled false))

      :special-characters
      (swap! state assoc :keyboard/is-special-enabled (not (:keyboard/is-special-enabled @state)))

      :other-special-characters
      (swap! state assoc :keyboard/is-other-special-enabled (not (:keyboard/is-other-special-enabled @state)))

      :suffix-candidates
      (do
        (let [selection (.-selection @control/editing-value)
              last-word (utils/get-current-word (.-text @control/editing-value)
                                                selection)]
          (when (and (pos? (.-start selection))
                     (empty? last-word))
            (control/delete-text)))
        (keyboard-candidates/suffix-candidates (.-text @control/editing-value)
                                               (.-selection @control/editing-value)
                                               state)))))

(defn on-candidates-clicked
  [text state]
  (let [text-with-space (str text " ")]
    (if (some (into #{}
                    keyboard-candidates/suffix-candidatges-for-full)
              [text])
      (control/insert-text text-with-space)
      (control/replace-word text-with-space)))
  (let [candidates (get @keyboard-candidates/next text)]
    (if (empty? candidates)
      (swap! state assoc :keyboard/candidates-list [])
      (swap! state assoc :keyboard/candidates-list (map first (sort-by #(int/parse (last %)) > candidates))))))