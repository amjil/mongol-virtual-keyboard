(ns virtual-keyboard.keyboard-candidates
  (:require
   ["package:flutter/services.dart" :as services]
   ["package:mongol_code/mongol_code.dart" :as code]
   ["package:http/http.dart" :as http]
   ["dart:convert" :as convert]
   ["dart:io" :as io]
   [virtual-keyboard.utils :as utils]
   [virtual-keyboard.options :as options]
   [clojure.string :as str]))

(def suffix-candidatges-for-full
  [code.Suffix/YIN 
   code.Suffix/UN
   code.Suffix/U 
   code.Suffix/I 
   code.Suffix/DU code.Suffix/TU
   code.Suffix/DUR code.Suffix/TUR 
   code.Suffix/DAQI code.Suffix/TAQI
   code.Suffix/ACHA code.Suffix/ECHE 
   code.Suffix/BAR code.Suffix/IYAR
   code.Suffix/TAI 
   code.Suffix/LUGA code.Suffix/LUEGE 
   code.Suffix/BAN code.Suffix/IYEN 
   code.Suffix/YUGAN code.Suffix/YUEGEN 
   code.Suffix/DAGAN code.Suffix/DEGEN 
   code.Suffix/TAGAN code.Suffix/TEGEN 
   code.Suffix/ACHAGAN code.Suffix/ECHEGEN 
   code.Suffix/UD 
   code.Suffix/NUGUD code.Suffix/NUEGUED
   code.Suffix/NAR 
   code.Suffix/UU 
   code.Suffix/DA 
   code.Suffix/CHU])

(defn suffix-candidates-for-word
  [word gender]
  (let [last-char (if (empty? word) 0 (int (last word)))]
    [(code.Suffix/getSuffixYinUnU gender last-char)
     (code.Suffix/getSuffixTuDu gender last-char)
     (code.Suffix/getSuffixTaganDagan gender last-char)
     (code.Suffix/getSuffixTaqiDaqi gender last-char)
     (code.Suffix/getSuffixYiI last-char)
     (code.Suffix/getSuffixBarIyar gender last-char)
     (code.Suffix/getSuffixBanIyan gender last-char)
     (code.Suffix/getSuffixAchaEche gender)
     (code.Suffix/getSuffixTaiTei gender)
     (code.Suffix/getSuffixUu gender)
     (code.Suffix/getSuffixUd gender)
     (code.Suffix/getSuffixNugud gender)
     (code.Suffix/getSuffixChu gender)]))

(defn suffix-candidates 
  [text 
   ^services/TextSelection selection
   state]
   (if (empty? text)
     (swap! state assoc :keyboard/candidates-list suffix-candidatges-for-full)
     (let [back-count 30
           substr (subs text (max 0 (- (.-start selection) back-count)) (.-start selection))
           last-word (str/trim (utils/get-last-word substr))]
       (if (empty? last-word)
         (swap! state assoc :keyboard/candidates-list suffix-candidatges-for-full)
         (if (code.MongolCode/isMongolian (int (last last-word)))
           (let [gender (.getWordGender code/MongolCode last-word)]
             (if (empty? last-word)
               (swap! state assoc :keyboard/candidates-list suffix-candidatges-for-full)
               (swap! state assoc :keyboard/candidates-list
                      (remove #(nil? %) (suffix-candidates-for-word last-word gender)))))
           (swap! state assoc :keyboard/candidates-list suffix-candidatges-for-full))))))

;;; 
;; http im candidates
;; (defn ^:async query-next-word-candidates 
;;   [state word]
;;   (let [result (await
;;                 (http/post (Uri/http options/base-url "/api/next_word/candidates")
;;                            .headers {"Content-Type" "application/json; charset=UTF-8"}
;;                            .body
;;                            (convert/jsonEncode
;;                             {"word" word})))
;;         response-body (convert/jsonDecode (.-body result))]
;;     (swap! state assoc :keyboard/candidates-list response-body)))

(def data (atom {}))

(def next (atom {}))